name: Deploy

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install SOPS and Kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl
    
          SOPS_LATEST_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
          curl -Lo sops.deb "https://github.com/getsops/sops/releases/download/v${SOPS_LATEST_VERSION}/sops_${SOPS_LATEST_VERSION}_amd64.deb"
          sudo apt --fix-broken install ./sops.deb
           rm -rf sops.deb
           sops -version
          
      - name: Verify SOPS Installation
        run: |
          sops --version

      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
      - name: Import PGP Private Key
        run: |
            echo "${{ secrets.PGP_PRIVATE_KEY }}" | gpg --import
            
      - name: Decrypt and Apply Secrets
        run: |
          chmod +x ./decrypt-secrets.sh
          ./decrypt-secrets.sh
          if [ -f k8s-deployment.yaml ]; then
            kubectl apply -f k8s-deployment.yaml
          else
            echo "k8s-deployment.yaml not found"
            exit 1
          fi
        shell: /usr/bin/bash -e {0}
      - name: Apply Kubernetes Manifests
        run: |
          # Apply the decrypted secret
          if [ -f secret.yaml ]; then
            kubectl apply -f secret.yaml
          else
            echo "secret.yaml not found, skipping secret application"
          fi

          # Apply the Kubernetes deployment for Ghost and Nginx
          if [ -f k8s-deployment.yaml ]; then
            kubectl apply -f k8s-deployment.yaml
          else
            echo "k8s-deployment.yaml not found"
            exit 1
          fi
        shell: /usr/bin/bash -e {0}

      - name: Confirm Deployment
        run: |
          kubectl get pods
          kubectl get svc
      - name: Install Prometheus and Grafana
        run: |
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo add grafana https://grafana.github.io/helm-charts
              helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace
              helm install grafana grafana/grafana --namespace monitoring 
      - name: Expose Grafana Service
        run: |
          kubectl expose deployment grafana --type=LoadBalancer --name=grafana --namespace=monitoring 

      - name: Apply Prometheus Alert Rules
        run: |
          kubectl apply -f prometheus-alert-rules.yaml